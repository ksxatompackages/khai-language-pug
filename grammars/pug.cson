fileTypes: [
	"pug"
	"jade"
]
name: "Pug"
patterns: [
	{
		comment: "Doctype declaration."
		match: "^(!!!|doctype)(\\s*[a-zA-Z0-9-_]+)?"
		name: "meta.tag.sgml.doctype.html"
	}
	{
		begin: "^(\\s*)//-"
		comment: "Unbuffered (jade-only) comments."
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "comment.unbuffered.block.jade.pug.pug"
	}
	{
		begin: "^(\\s*)//"
		comment: "Buffered (html) comments."
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "string.comment.buffered.block.jade.pug.pug"
		patterns: [
			{
				captures:
					"1":
						name: "invalid.illegal.comment.comment.block.jade.pug"
				comment: "Buffered comments inside buffered comments will generate invalid html."
				match: "^\\s*(//)(?!-)"
				name: "string.comment.buffered.block.jade.pug"
			}
		]
	}
	{
		begin: "<!--"
		end: "--\\s*>"
		name: "comment.unbuffered.block.jade.pug"
		patterns: [
			{
				match: "--"
				name: "invalid.illegal.comment.comment.block.jade.pug"
			}
		]
	}
	{
		begin: "^(\\s*)-$"
		comment: "Unbuffered code block."
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "source.js"
		patterns: [
			{
				include: "source.js"
			}
		]
	}
	{
		begin: "^(\\s*)(script)((\\.$)|(?=[^\\n]*(text|application)/javascript.*\\.$))"
		beginCaptures:
			"2":
				name: "entity.name.tag.jade.pug"
		comment: "Script tag with JavaScript code."
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "meta.tag.other"
		patterns: [
			{
				begin: "\\G(?=\\()"
				end: "$"
				patterns: [
					{
						include: "#tag_attributes"
					}
				]
			}
			{
				begin: "\\G(?=[.#])"
				end: "$"
				patterns: [
					{
						include: "#complete_tag"
					}
				]
			}
			{
				include: "source.js"
			}
		]
	}
	{
		begin: "^(\\s*)(style)((\\.$)|(?=[.#(].*\\.$))"
		beginCaptures:
			"2":
				name: "entity.name.tag.jade.pug"
		comment: "Style tag with CSS code."
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "meta.tag.other"
		patterns: [
			{
				begin: "\\G(?=\\()"
				end: "$"
				patterns: [
					{
						include: "#tag_attributes"
					}
				]
			}
			{
				begin: "\\G(?=[.#])"
				end: "$"
				patterns: [
					{
						include: "#complete_tag"
					}
				]
			}
			{
				include: "source.css"
			}
		]
	}
	{
		begin: "^(\\s*):(sass)(?=\\(|$)"
		beginCaptures:
			"2":
				name: "constant.language.name.sass.filter.jade.pug"
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "source.sass.filter.jade.pug"
		patterns: [
			{
				include: "#tag_attributes"
			}
			{
				include: "source.sass"
			}
		]
	}
	{
		begin: "^(\\s*):(less)(?=\\(|$)"
		beginCaptures:
			"2":
				name: "constant.language.name.less.filter.jade.pug"
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "source.less.filter.jade.pug"
		patterns: [
			{
				include: "#tag_attributes"
			}
			{
				include: "source.less"
			}
		]
	}
	{
		begin: "^(\\s*):(stylus)(?=\\(|$)"
		beginCaptures:
			"2":
				name: "constant.language.name.stylus.filter.jade.pug"
		end: "^(?!(\\1\\s)|\\s*$)"
		patterns: [
			{
				include: "#tag_attributes"
			}
			{
				include: "source.stylus"
			}
		]
	}
	{
		begin: "^(\\s*):(coffee(-?script)?)(?=\\(|$)"
		beginCaptures:
			"2":
				name: "constant.language.name.coffeescript.filter.jade.pug"
		end: "^(?!(\\1\\s)|\\s*$)"
		name: "source.coffeescript.filter.jade.pug"
		patterns: [
			{
				include: "#tag_attributes"
			}
			{
				include: "source.coffee"
			}
		]
	}
	{
		begin: "^(\\s*)((:(?=.))|(:$))"
		beginCaptures:
			"4":
				name: "invalid.illegal.empty.generic.filter.jade.pug"
		comment: "Generic Jade filter."
		end: "^(?!(\\1\\s)|\\s*$)"
		patterns: [
			{
				begin: "\\G(?<=:)(?=.)"
				end: "$"
				name: "name.generic.filter.jade.pug"
				patterns: [
					{
						match: "\\G\\("
						name: "invalid.illegal.name.generic.filter.jade.pug"
					}
					{
						match: "[\\w-]"
						name: "constant.language.name.generic.filter.jade.pug"
					}
					{
						include: "#tag_attributes"
					}
					{
						match: "\\W"
						name: "invalid.illegal.name.generic.filter.jade.pug"
					}
				]
			}
		]
	}
	{
		begin: "^(\\s*)(?=[\\w.#].*?\\.$)(?=(?:(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*)(?:(?:(?::\\s+)|(?<=\\)))(?:(?:(?:(?:#[\\w-]+)|(?:\\.[\\w-]+))|(?:(?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))(?:(?:#[\\w-]+)|(?:\\.[\\w-]+)|(?:\\((?:[^()\\'\\\"]*(?:(?:\\'(?:[^\\']|(?:(?<!\\\\)\\\\\\'))*\\')|(?:\\\"(?:[^\\\"]|(?:(?<!\\\\)\\\\\\\"))*\\\")))*[^()]*\\))*)*))*)\\.$)(?:(?:(#[\\w-]+)|(\\.[\\w-]+))|((?:[#!]\\{[^}]*\\})|(?:\\w(?:(?:[\\w:-]+[\\w-])|(?:[\\w-]*)))))"
		beginCaptures:
			"2":
				name: "entity.other.attribute-name.id.jade.pug"
			"3":
				name: "entity.other.attribute-name.class.jade.pug"
			"4":
				name: "meta.tag.other entity.name.tag.jade.pug"
		comment: "Generated from dot_block_tag.py"
		end: "^(?!(\\1\\s)|\\s*$)"
		patterns: [
			{
				include: "#tag_attributes"
			}
			{
				include: "#complete_tag"
			}
			{
				begin: "^(?=.)"
				end: "$"
				name: "text.block.jade.pug"
				patterns: [
					{
						include: "#inline_jade"
					}
					{
						include: "#embedded_html"
					}
					{
						include: "#html_entity"
					}
					{
						include: "#interpolated_value"
					}
					{
						include: "#interpolated_error"
					}
				]
			}
		]
	}
	{
		begin: "^\\s*"
		comment: "All constructs that generally span a single line starting with any number of white-spaces."
		end: "$"
		patterns: [
			{
				include: "#inline_jade"
			}
			{
				include: "#blocks_and_includes"
			}
			{
				include: "#unbuffered_code"
			}
			{
				include: "#mixin_definition"
			}
			{
				include: "#mixin_call"
			}
			{
				include: "#flow_control"
			}
			{
				include: "#case_conds"
			}
			{
				begin: "\\|"
				comment: "Tag pipe text line."
				end: "$"
				name: "text.block.pipe.jade.pug"
				patterns: [
					{
						include: "#inline_jade"
					}
					{
						include: "#embedded_html"
					}
					{
						include: "#html_entity"
					}
					{
						include: "#interpolated_value"
					}
					{
						include: "#interpolated_error"
					}
				]
			}
			{
				include: "#printed_expression"
			}
			{
				begin: "\\G(?=(#[^\\{\\w-])|[^\\w.#])"
				comment: "Line starting with characters incompatible with tag name/id/class is standalone text."
				end: "$"
				patterns: [
					{
						begin: "</?(?=[!#])"
						end: ">|$"
						patterns: [
							{
								include: "#inline_jade"
							}
							{
								include: "#interpolated_value"
							}
							{
								include: "#interpolated_error"
							}
						]
					}
					{
						include: "#inline_jade"
					}
					{
						include: "#embedded_html"
					}
					{
						include: "#html_entity"
					}
					{
						include: "#interpolated_value"
					}
					{
						include: "#interpolated_error"
					}
				]
			}
			{
				include: "#complete_tag"
			}
		]
	}
]
repository:
	babel_parens:
		begin: "\\("
		end: "\\)|(({\\s*)?$)"
		patterns: [
			{
				include: "#babel_parens"
			}
			{
				include: "source.js"
			}
		]
	blocks_and_includes:
		captures:
			"1":
				name: "storage.type.import.include.jade.pug"
			"4":
				name: "variable.control.import.include.jade.pug"
		comment: "Template blocks and includes."
		match: "(extends|include|yield|append|prepend|block( (append|prepend))?)\\s+(.*)$"
		name: "meta.first-class.jade.pug"
	case_conds:
		begin: "(default|when)((\\s+|(?=:))|$)"
		captures:
			"1":
				name: "storage.type.function.jade.pug"
		comment: "Jade case conditionals."
		end: "$"
		name: "meta.control.flow.jade.pug"
		patterns: [
			{
				begin: "\\G(?!:)"
				end: "(?=:\\s+)|$"
				name: "js.embedded.control.flow.jade.pug"
				patterns: [
					{
						include: "#case_when_paren"
					}
					{
						include: "source.js"
					}
				]
			}
			{
				begin: ":\\s+"
				end: "$"
				name: "tag.case.control.flow.jade.pug"
				patterns: [
					{
						include: "#complete_tag"
					}
				]
			}
		]
	case_when_paren:
		begin: "\\("
		end: "\\)"
		name: "js.when.control.flow.jade.pug"
		patterns: [
			{
				include: "#case_when_paren"
			}
			{
				match: ":"
				name: "invalid.illegal.name.tag.jade.pug"
			}
			{
				include: "source.js"
			}
		]
	complete_tag:
		begin: "(?=[\\w.#])|(:\\s*)"
		end: "(\\.?$)|(?=:.)"
		patterns: [
			{
				include: "#blocks_and_includes"
			}
			{
				include: "#unbuffered_code"
			}
			{
				include: "#mixin_call"
			}
			{
				include: "#flow_control"
			}
			{
				match: "(?<=:)\\w.*$"
				name: "invalid.illegal.name.tag.jade.pug"
			}
			{
				include: "#tag_name"
			}
			{
				include: "#tag_id"
			}
			{
				include: "#tag_classes"
			}
			{
				include: "#tag_attributes"
			}
			{
				include: "#tag_mixin_attributes"
			}
			{
				captures:
					"2":
						name: "invalid.illegal.end.tag.jade.pug"
					"4":
						name: "invalid.illegal.end.tag.jade.pug"
				match: "((\\.)\\s+$)|((:)\\s*$)"
			}
			{
				include: "#printed_expression"
			}
			{
				include: "#tag_text"
			}
		]
	embedded_html:
		begin: "(?=<[^>]*>)"
		end: "$|(?=>)"
		name: "html"
		patterns: [
			{
				include: "text.html.basic"
			}
			{
				include: "#interpolated_value"
			}
			{
				include: "#interpolated_error"
			}
		]
	flow_control:
		begin: "(for|if|else if|else|each|until|while|unless|case)(\\s+|$)"
		captures:
			"1":
				name: "storage.type.function.jade.pug"
		comment: "Jade control flow."
		end: "$"
		name: "meta.control.flow.jade.pug"
		patterns: [
			{
				begin: ""
				end: "$"
				name: "js.embedded.control.flow.jade.pug"
				patterns: [
					{
						include: "source.js"
					}
				]
			}
		]
	html_entity:
		patterns: [
			{
				match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
				name: "constant.character.entity.html.text.jade.pug"
			}
			{
				match: "[<>&]"
				name: "invalid.illegal.html_entity.text.jade.pug"
			}
		]
	inline_jade:
		begin: "(?<!\\\\)(#\\[)"
		captures:
			"1":
				name: "entity.name.function.jade.pug"
			"2":
				name: "entity.name.function.jade.pug"
		end: "(\\])"
		name: "inline.jade.pug"
		patterns: [
			{
				include: "#inline_jade"
			}
			{
				include: "#mixin_call"
			}
			{
				begin: "(?<!\\])(?=[\\w.#])|(:\\s*)"
				end: "(?=\\]|(:.)|=|\\s)"
				name: "tag.inline.jade.pug"
				patterns: [
					{
						include: "#tag_name"
					}
					{
						include: "#tag_id"
					}
					{
						include: "#tag_classes"
					}
					{
						include: "#tag_attributes"
					}
					{
						include: "#tag_mixin_attributes"
					}
					{
						include: "#inline_jade"
					}
					{
						match: "\\["
						name: "invalid.illegal.tag.jade.pug"
					}
				]
			}
			{
				include: "#unbuffered_code"
			}
			{
				include: "#printed_expression"
			}
			{
				match: "\\["
				name: "invalid.illegal.tag.jade.pug"
			}
			{
				include: "#inline_jade_text"
			}
		]
	inline_jade_text:
		begin: ""
		end: "(?=\\])"
		patterns: [
			{
				begin: "\\["
				end: "\\]"
				patterns: [
					{
						include: "#inline_jade_text"
					}
				]
			}
			{
				include: "#inline_jade"
			}
			{
				include: "#embedded_html"
			}
			{
				include: "#html_entity"
			}
			{
				include: "#interpolated_value"
			}
			{
				include: "#interpolated_error"
			}
		]
	interpolated_error:
		match: "(?<!\\\\)[#!]\\{(?=[^}]*$)"
		name: "invalid.illegal.tag.jade.pug"
	interpolated_value:
		begin: "(?<!\\\\)[#!]\\{(?=.*?\\})"
		end: "\\}"
		name: "string.interpolated.jade.pug"
		patterns: [
			{
				match: "{"
				name: "invalid.illegal.tag.jade.pug"
			}
			{
				include: "source.js"
			}
		]
	js_braces:
		begin: "\\{"
		end: "\\}"
		patterns: [
			{
				include: "#js_braces"
			}
			{
				include: "source.js"
			}
		]
	js_brackets:
		begin: "\\["
		end: "\\]"
		patterns: [
			{
				include: "#js_brackets"
			}
			{
				include: "source.js"
			}
		]
	js_parens:
		begin: "\\("
		end: "\\)"
		patterns: [
			{
				include: "#js_parens"
			}
			{
				include: "source.js"
			}
		]
	mixin_call:
		begin: "((?:mixin\\s+)|\\+)([\\w-]+)"
		beginCaptures:
			"1":
				name: "storage.type.function.jade.pug"
			"2":
				name: "meta.tag.other entity.name.function.jade.pug"
		end: "(?!\\()|$"
		patterns: [
			{
				begin: "(?<!\\))\\("
				end: "\\)"
				name: "args.mixin.jade.pug"
				patterns: [
					{
						include: "#js_parens"
					}
					{
						include: "#string"
					}
					{
						captures:
							"1":
								name: "meta.tag.other entity.other.attribute-name.tag.jade.pug"
						match: "([^\\s(),=/]+)\\s*=\\s*"
					}
					{
						include: "source.js"
					}
				]
			}
			{
				include: "#tag_attributes"
			}
		]
	mixin_definition:
		captures:
			"1":
				name: "storage.type.function.jade.pug"
			"2":
				name: "meta.tag.other entity.name.function.jade.pug"
			"3":
				name: "punctuation.definition.parameters.begin.js"
			"4":
				name: "variable.parameter.function.js"
			"5":
				name: "punctuation.definition.parameters.begin.js"
		match: "(mixin\\s+)([\\w-]+)(?:(\\()\\s*((?:[a-zA-Z_]\\w*\\s*)(?:,\\s*[a-zA-Z_]\\w*\\s*)*)(\\)))?$"
	printed_expression:
		begin: "(!?\\=)\\s*"
		captures:
			"1":
				name: "constant"
		end: "(?=\\])|$"
		name: "source.js"
		patterns: [
			{
				include: "#js_brackets"
			}
			{
				include: "source.js"
			}
		]
	string:
		begin: "(['\"])"
		end: "(?<!\\\\)\\1"
		name: "string.quoted.jade.pug"
		patterns: [
			{
				match: "\\\\((x[0-9a-fA-F]{2})|(u[0-9]{4})|.)"
				name: "constant.character.quoted.jade.pug"
			}
			{
				include: "#interpolated_value"
			}
			{
				include: "#interpolated_error"
			}
		]
	tag_attribute_name:
		captures:
			"1":
				name: "entity.other.attribute-name.tag.jade.pug"
		match: "([^\\s(),=/!]+)\\s*"
	tag_attribute_name_paren:
		begin: "\\(\\s*"
		end: "\\)"
		name: "entity.other.attribute-name.tag.jade.pug"
		patterns: [
			{
				include: "#tag_attribute_name_paren"
			}
			{
				include: "#tag_attribute_name"
			}
		]
	tag_attributes:
		begin: "(\\(\\s*)"
		captures:
			"1":
				name: "constant.name.attribute.tag.jade.pug"
		end: "(\\))"
		name: "meta.tag.other"
		patterns: [
			{
				include: "#tag_attribute_name_paren"
			}
			{
				include: "#tag_attribute_name"
			}
			{
				match: "!(?!=)"
				name: "invalid.illegal.tag.jade.pug"
			}
			{
				begin: "=\\s*"
				end: "$|(?=,|(?:\\s+[^!%&*-+~|<>:?/])|\\))"
				name: "attribute_value"
				patterns: [
					{
						include: "#string"
					}
					{
						include: "#js_parens"
					}
					{
						include: "#js_brackets"
					}
					{
						include: "#js_braces"
					}
					{
						include: "source.js"
					}
				]
			}
			{
				begin: "(?<=[%&*-+~|<>:?/])\\s+"
				end: "$|(?=,|(?:\\s+[^!%&*-+~|<>:?/])|\\))"
				name: "attribute_value2"
				patterns: [
					{
						include: "#string"
					}
					{
						include: "#js_parens"
					}
					{
						include: "#js_brackets"
					}
					{
						include: "#js_braces"
					}
					{
						include: "source.js"
					}
				]
			}
		]
	tag_classes:
		captures:
			"1":
				name: "invalid.illegal.tag.jade.pug"
		match: "\\.([^\\w-])?[\\w-]*"
		name: "entity.other.attribute-name.class.jade.pug"
	tag_id:
		match: "#[\\w-]+"
		name: "entity.other.attribute-name.id.jade.pug"
	tag_mixin_attributes:
		begin: "(&attributes\\()"
		captures:
			"1":
				name: "entity.name.function.jade.pug"
		end: "(\\))"
		name: "meta.tag.other"
		patterns: [
			{
				match: "attributes(?=\\))"
				name: "storage.type.keyword.jade.pug"
			}
			{
				include: "source.js"
			}
		]
	tag_name:
		begin: "([#!]\\{(?=.*?\\}))|(\\w(([\\w:-]+[\\w-])|([\\w-]*)))"
		end: "(\\G(?<!\\5[^\\w-]))|\\}|$"
		name: "meta.tag.other entity.name.tag.jade.pug"
		patterns: [
			{
				begin: "\\G(?<=\\{)"
				end: "(?=\\})"
				name: "meta.tag.other entity.name.tag.jade.pug"
				patterns: [
					{
						match: "{"
						name: "invalid.illegal.tag.jade.pug"
					}
					{
						include: "source.js"
					}
				]
			}
		]
	tag_text:
		begin: "(?=.)"
		end: "$"
		patterns: [
			{
				include: "#inline_jade"
			}
			{
				include: "#embedded_html"
			}
			{
				include: "#html_entity"
			}
			{
				include: "#interpolated_value"
			}
			{
				include: "#interpolated_error"
			}
		]
	unbuffered_code:
		begin: "(-|(([a-zA-Z0-9_]+)\\s+=))"
		beginCaptures:
			"3":
				name: "variable.parameter.javascript.embedded.jade.pug"
		comment: "name = function() {}"
		end: "(?=\\])|(({\\s*)?$)"
		name: "source.js"
		patterns: [
			{
				include: "#js_brackets"
			}
			{
				include: "#babel_parens"
			}
			{
				include: "source.js"
			}
		]
scopeName: "text.jade.pug"
uuid: "eee6ba25-6ac2-4f7e-9c70-cddf2bd3448b"
version: "https://github.com/davidrios/jade-tmbundle/commit/f311a516bb29296fcebfdc7da8149b1c79dfb0a1"